// <auto-generated />
using System;
using Danielson.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Danielson.Data.Migrations
{
    [DbContext(typeof(FormContext))]
    [Migration("20240522130318_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Danielson.Data.DataModels.ComponentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentConsiderations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComponentOrder")
                        .HasColumnType("int");

                    b.Property<string>("ComponentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("DomainItem")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("QualitativeScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantitativeScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("ComponentAnswer", "danielson");
                });

            modelBuilder.Entity("Danielson.Data.DataModels.ConsiderationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentOrder")
                        .HasColumnType("int");

                    b.Property<string>("ConsiderationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DomainItem")
                        .HasColumnType("int");

                    b.Property<int>("FormTemplateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("ConsiderationTemplate", "danielson");
                });

            modelBuilder.Entity("Danielson.Data.DataModels.DomainAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("DomainItem")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextSteps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strengths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("DomainAnswer", "danielson");
                });

            modelBuilder.Entity("Danielson.Data.DataModels.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEvaluated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FinalScore")
                        .HasColumnType("float");

                    b.Property<string>("FinalScoreText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormTemplateInternalLookupString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMidterm")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlacementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<string>("SemesterDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowComponents")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowNotObserved")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowQuantitativeAnswer")
                        .HasColumnType("bit");

                    b.Property<string>("Student")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentEvaluationId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Form", "danielson");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 0,
                            DateEvaluated = new DateTime(2024, 5, 22, 8, 3, 18, 107, DateTimeKind.Local).AddTicks(3586),
                            DateSubmitted = new DateTime(2024, 5, 22, 8, 3, 18, 107, DateTimeKind.Local).AddTicks(3593),
                            Email = "test@illinois.edu",
                            FinalScore = 0.0,
                            FinalScoreText = "",
                            FinalSummary = "",
                            FormTemplateInternalLookupString = "default",
                            IsActive = true,
                            IsMidterm = false,
                            LastUpdated = new DateTime(2024, 5, 22, 8, 3, 18, 107, DateTimeKind.Local).AddTicks(3598),
                            PlacementType = "",
                            Position = "",
                            ProgramId = 0,
                            SemesterDate = "",
                            ShowComponents = true,
                            ShowNotObserved = true,
                            ShowQuantitativeAnswer = true,
                            Student = "",
                            StudentEvaluationId = 0,
                            StudentId = 0,
                            Title = "Test form"
                        });
                });

            modelBuilder.Entity("Danielson.Data.DataModels.FormTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FinalAnswerOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalLookupString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormTemplate", "danielson");
                });

            modelBuilder.Entity("Danielson.Data.DataModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", "danielson");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "admin@illinois.edu",
                            Guid = new Guid("be31303e-404a-471c-b7c0-dfdea01a4121"),
                            IsActive = false,
                            LastUpdated = new DateTime(2024, 5, 22, 8, 3, 18, 107, DateTimeKind.Local).AddTicks(3458),
                            Role = 99,
                            StudentId = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = -2,
                            Email = "student@illinois.edu",
                            Guid = new Guid("3784cb3c-681f-45b0-9b67-391ca17f5c0f"),
                            IsActive = false,
                            LastUpdated = new DateTime(2024, 5, 22, 8, 3, 18, 107, DateTimeKind.Local).AddTicks(3468),
                            Role = 1,
                            StudentId = 0,
                            Username = "student"
                        },
                        new
                        {
                            Id = -3,
                            Email = "supervisor@illinois.edu",
                            Guid = new Guid("50924bd6-1494-4c5c-a064-81b8aabedfa2"),
                            IsActive = false,
                            LastUpdated = new DateTime(2024, 5, 22, 8, 3, 18, 107, DateTimeKind.Local).AddTicks(3474),
                            Role = 2,
                            StudentId = 0,
                            Username = "supervisor"
                        },
                        new
                        {
                            Id = -4,
                            Email = "cotestaff@illinois.edu",
                            Guid = new Guid("b1dfc3d3-b726-4946-a65f-9489d360662f"),
                            IsActive = false,
                            LastUpdated = new DateTime(2024, 5, 22, 8, 3, 18, 107, DateTimeKind.Local).AddTicks(3479),
                            Role = 4,
                            StudentId = 0,
                            Username = "cotestaff"
                        });
                });

            modelBuilder.Entity("Danielson.Data.DataModels.ComponentAnswer", b =>
                {
                    b.HasOne("Danielson.Data.DataModels.Form", "Form")
                        .WithMany("ComponentAnswers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Danielson.Data.DataModels.ConsiderationTemplate", b =>
                {
                    b.HasOne("Danielson.Data.DataModels.FormTemplate", "FormTemplate")
                        .WithMany("ConsiderationTemplates")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormTemplate");
                });

            modelBuilder.Entity("Danielson.Data.DataModels.DomainAnswer", b =>
                {
                    b.HasOne("Danielson.Data.DataModels.Form", "Form")
                        .WithMany("DomainAnswers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Danielson.Data.DataModels.Form", b =>
                {
                    b.Navigation("ComponentAnswers");

                    b.Navigation("DomainAnswers");
                });

            modelBuilder.Entity("Danielson.Data.DataModels.FormTemplate", b =>
                {
                    b.Navigation("ConsiderationTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
