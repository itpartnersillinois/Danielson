@page "/Admin/EditFormTemplate/{id:int?}"
@attribute [Authorize(Roles = "Admin,CoteStaff")]

<PageTitle>Add / Edit Form Template</PageTitle>
<h1>Add / Edit Form Template</h1>

<p>This page is to manage considerations text for domain components for specific placement evaluation form templates. </p>

<div>
    <label for="formTitle">Template Title (for your reference):</label> <br />
    <input id="formTitle" type="text" @bind="FormTemplate.Title" class="form-control" style="width: 100%; border-radius: 5px; padding: 10px; font: 16px / 18px var(--il-source-sans); border: thin var(--il-blue) solid;" />
</div>

<div>
    <label for="InternalLookupString">Internal Lookup String </label> <span id="InternalLookupString-desc">(this is an internal value used to associate an evaluation with a specific considerations template; please contact IT to determine what this should be):</span> <br />
    <input id="InternalLookupString" type="text" @bind="FormTemplate.InternalLookupString" aria-describedby="InternalLookupString-desc" class="form-control" style="width: 100%; border-radius: 5px; padding: 10px; font: 16px / 18px var(--il-source-sans); border: thin var(--il-blue) solid;" />
</div>

<h2>Considerations</h2>
<p>When adding or editing consideration text use the following rules:</p>
<ul>
    <li>Put each consideration on a single and separate line.</li>
    <li>Do not use numbers, astericks, or bullets to put them in a list. These will be automatically added as a bulletted list to the form.</li>
    <li>Do not forget to save your changes using the Save Changes button at the bottom of the page.</li>
</ul>
<p><em>Note:</em> If you need to add, remove, or change other component related text, please contact IT.</p>
@foreach (var domain in DomainList.Domains.OrderBy(d => d.DomainEnum))
{
    <h3>@domain.Title</h3>
    
    

    @foreach (var component in domain.Components.OrderBy(c => c.ComponentOrder))
    {
        <ConsiderationEditor Title="@component.Title" ConsiderationId="@component.Code" ConsiderationTemplate="FormTemplate.GetConsiderationTemplate(domain.DomainEnum, component.ComponentOrder)" OnChangeCallback="e => SaveConsideration(e)" />
    }

}

<p><button class="il-button" @onclick="Save">Save Changes</button></p>